import java.util.Deque;
import java.util.LinkedList;

public class RPNCalculator implements Calculator {
    private final TokenSet tokenSet;

    public RPNCalculator(TokenSet tokenSet) {
        this.tokenSet = tokenSet;
    }

    @Override
    public double calculate(String expression) {
        Deque<Double> stack = new LinkedList<>();
        String[] tokens = expression.split("\\s+");  // Split by spaces for multi-character tokens

        for (String token : tokens) {
            if (isNumber(token)) {
                stack.push(Double.parseDouble(token));
            } else {
                tokenSet.getOperation(getTokenKey(token))
                        .ifPresentOrElse(
                                op -> processOperation(stack, op),
                                () -> { throw new IllegalArgumentException("Unknown token: " + token); }
                        );
            }
        }
        return stack.pop();
    }

    private void processOperation(Deque<Double> stack, Operation operation) {
        double b = stack.pop();
        double a = stack.pop();
        stack.push(operation.apply(a, b));
    }

    private boolean isNumber(String token) {
        return token.chars().allMatch(Character::isDigit);
    }

    private Object getTokenKey(String token) {
        return (token.length() == 1) ? token.charAt(0) : token;
    }
}
